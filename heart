<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML>

<HEAD>
    <TITLE>I Love You</TITLE>
    <META NAME="Generator" CONTENT="EditPlus">
    <META NAME="Author" CONTENT="">
    <META NAME="Keywords" CONTENT="">
    <META NAME="Description" CONTENT="">
    <style>
        html,
        body {
            height: 100%;
            padding: 0;
            margin: 0;
            background: #000;
        }
        
        canvas {
            position: absolute;
            width: 100%;
            height: 100%;
        }
        
    </style>
</HEAD>

    </BODY> 
    <canvas id="pinkboard"></canvas>
    <script>
        /*
        * Settings
        */
        var settings = {
            particles: {
                length: 500, // maximum amount of particles
                duration: 2, // particle duration in sec
                velocity: 100, // particle velocity in pixels/sec
                effect: -0.75, // play with this for a nice effect
                size: 30, // particle soze in pixels
            },
        };
        
        /*
        * RequestAnimationFrame polyfill by Erik Moller
        */
        (function(){var b=0; var c=["ms","moz","webkit","o"];for(var a=0; a<c.length&&!window.RequestAnimationFrame;++a){window.RequestAnimationFrame=window[c[a]+"RequestAnimationFrame"];window.cancelAnimationFrame=window[c[a]+"cancelAnimationFrame"]||window[c[a]+"cancelrequestAnimationFrame"]}if(!window.RequestAnimationFrame){window.RequestAnimationFrame=function(h,e){var d=new Date().getTime();var f=Math.max(0,16-(d-b));var g=window.setTimeout(function(){h(d+f)},f);b=d+f;return g}}if(!window.cancelAnimationFrame){window.cancelAnimationFrame=function(d){clearTimeout(d)}}}());
        
        /*
        * Point class
        */
        var Point = (function( {function Point(x,y) {this.x = (typeof x !=='undefined') ? x : 0; this.y = (typeof y!== 'undefined') ? y : 0;}
            Point.prototype.clone = function() {
                return new Point(this.x, this.y);
            };
            Point.prototype.length = function(length) {
                if (typeof length == 'undefined')
                return Math.sqrt(this.x * this.x + this.y * this.y);
                this.normalize();
                this.x *= length;
                this.y *= length;
                return this;
            };
            Point.prototype.normalize = function() {
                var length = this.length();
                this.x /= length;
                this.y /= length;
                return this;
            };
            return Point;
            })();
            /*
            * particle class
            */
            var particle = (function() {function particle() {
                this.position = new Point();
                this.velocity = new Point();
                this.acceleration = new Point();
                this.age = 0;
                }
                particle.prototype.initialize = function(x, y, dx, dy) {
                    this.position.x = x;
                    this.position.y = y;
                    this.position.dx = dx;
                    this.position.dy = dy;
                    this.acceleration.x = dx * settings.particles.effect;
                    this.acceleration.y = dy * settings.particles.effect;
                    this.age = 0;
                };
                particle.prototype.update = function(deltaTime) {
                    this.position.x += this.velocity.x * deltaTime;
                    this.position.y += this.velocity.y * deltaTime;
                    this.velocity.x += this.acceleration.x * deltaTime;
                    this.velocity.y += this.acceleration.y * deltaTime;
                    this.age += deltaTime;
                };
                particle.prototype.draw = function(context, image) {function ease(t) {
                    return (--t) * t * t + 1;
                }
                var size = image.width * ease(this.age / settings.particles.duration);
                context.globalAlpha = 1 - this.age / settings.particles.duration;
                context.drawImage(image, this.position.x - size / 2, this.position.y - size / 2, size, size);
                return particle;
            })();
            /*
            * particlepool class
            */
            var particlepool = (function() {
                var particles,
                firstActive = 0,
                firstFree  =0,
                duration = settings.particles.duration;
                function particlepool(length)
                {
                    // create and populate position particlepool
                    particles = new
                Array(length);
                    for (var i = 0; i < particles.length; i++)
                    particles[i] = new particle();
                }
                particlepool.prototype.add = function(x, y, dx, dy);{
                    particles[firstFree].initialize(x, y, dx, dy);
                    //handle circular queue firstFree++;
                    if (firstFree == particles.length) firstFree = 0;
                    if (firstActive == firstFree) firstActive++;
                    if (firstActive == particles.length) firstActive = 0;
                };
                particlepool.prototype.update = function(deltaTime) {
                    var i;
                    
                    //update active particles if (firstActive < firstFree) {for (i = firstActive; i<firstFree; i++)
                }
            })
            }
        }))
    </script>
